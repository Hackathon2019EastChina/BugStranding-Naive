import React from "react";
import BaseComponent from '../../../components/BaseComponent'
import copy from 'copy-to-clipboard';
import {withRouter} from "react-router-dom";
import { connect } from 'react-redux';
import {Collapse,Typography,Card, Row, Col, AutoComplete,Button,Icon, Table,Divider,Descriptions,Input } from 'antd';
import User from './user'
import { Diff2Html } from "diff2html";
import "./resource/diff.css";
const { Title,Paragraph } = Typography;
const {Panel}=Collapse;

var columns = [];
class Answer extends BaseComponent {

    constructor(props){
        super(props);
        this.state={
            desp:1,
        }
    };

    componentWillMount(){
       
    }

    handleCopy=(dockerId)=>{
        if(copy(dockerId+""))
            this.pushNotification("success","Docker-"+dockerId+" has been copied. Please open it in VS Code")
        else
            this.pushNotification("danger","Copy Failed")
    }

    render(){
        const {aid,desp,diff,status,time,user,dockerId}=this.props.data
        return (
            <Card>
                <Row style={{width:"100%"}}>
                    <User user={user}/>
                    <Paragraph style={{fontSize:18,marginBottom:5}}>{time}</Paragraph> 
                </Row>
                <Paragraph style={{fontSize:22}}>{desp}</Paragraph>
                <Row type="flex" justify="start" align="middle">
                    <Icon type="loading" style={{marginRight:10}}/>
                    <Typography style={{fontSize:18}}>Source Docker: {dockerId?dockerId:"empty"}</Typography> 
                    <Button
                    style={styles.btn2}
                    type="link"
                    onClick={()=>{this.handleCopy(dockerId?dockerId:"empty")}}
                    ><Icon type="copy"/></Button> 
                </Row>
                <Collapse defaultActiveKey={['0']} >
                    <Panel header="Show me the code" key="1">
                        {this.renderDiff(diff)}
                    </Panel>
                </Collapse>
            </Card>
        )
    }

    renderDiff=(diff)=>{
        diff="--- a/server/vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go\n+++ b/server/vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go\n@@ -1035,6 +1035,17 @@ func Prctl(option int, arg2 uintptr, arg3 uintptr, arg4 uintptr, arg5 uintptr) (\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Pselect(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timespec, sigmask *Sigset_t) (n int, err error) {\n+\tr0, _, e1 := Syscall6(SYS_PSELECT6, uintptr(nfd), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(e)), uintptr(unsafe.Pointer(timeout)), uintptr(unsafe.Pointer(sigmask)))\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func read(fd int, p []byte) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(p) > 0 {\n"
        var html=Diff2Html.getPrettyHtml(diff, {
            inputFormat: "diff",
            showFiles: true,
            matching: "lines",
            outputFormat: "side-by-side"
        });
        html=html.replace(/href/g,"file")
        return(
            <div dangerouslySetInnerHTML={{__html: html}} />
        )
    }
}

const styles = {
    container:{
        marginBottom:"20px",
        fontSize:22
    },
    btn:{
        padding:5,
        marginRight:10
    },
    btn2:{
        padding:0,
        marginLeft:5
    }
}

export default withRouter(Answer);
